"use strict";var setup_form,svg_form;!function(e){function t(e){const t=new FormData(e),a={break:t.get("breakChar"),mcu_commands:{cls:t.get("clsChar"),csv:t.get("csvChar"),png:t.get("pngChar"),json:t.get("jsonChar")}};let n,l;n="linear"===t.get("xAxisType")?{type:"linear",title:t.get("xAxisTitle"),min:parseInt(t.get("xAxisMin")),max:parseInt(t.get("xAxisMax"))}:{type:"time",title:t.get("xAxisTitle"),manual:null!==t.get("manualTime"),format:t.get("timeFormat"),max:parseInt(t.get("maxReadings"))},l="linear"===t.get("yAxisType")?null!==t.get("autoScale")?{type:"linear-auto",title:t.get("yAxisTitle")}:{type:"linear-manual",title:t.get("yAxisTitle"),min:parseInt(t.get("yAxisMin")),max:parseInt(t.get("yAxisMax"))}:{type:"log",title:t.get("yAxisTitle"),base:"log2"===t.get("yAxisType")?2:10};let i={points:null!==t.get("showPoints"),fill:null!==t.get("fillArea")};const s=parseInt(t.get("graphCount"));let m=[];for(let e=1;e<=s;e++){let a=t.get(`graph${e}Name`),n=t.get(`graph${e}Color`);m.push({label:a,color:n})}return{serial:a,chart:{title:t.get("chartTitle"),x:n,y:l,options:i},datasets:m}}function a(e,t,a){const{serial:n,chart:l,datasets:i}=t,{title:s,x:m,y:o,options:r}=l;e.elements.namedItem("breakChar").value=n.break,e.elements.namedItem("clsChar").value=n.mcu_commands.cls,e.elements.namedItem("csvChar").value=n.mcu_commands.csv,e.elements.namedItem("pngChar").value=n.mcu_commands.png,e.elements.namedItem("jsonChar").value=n.mcu_commands.json,e.elements.namedItem("chartTitle").value=s,"linear"===m.type?(e.elements.namedItem("xAxisType").value="linear",e.elements.namedItem("xAxisTitle").value=m.title,e.elements.namedItem("xAxisMin").value=m.min.toString(),e.elements.namedItem("xAxisMax").value=m.max.toString()):(e.elements.namedItem("xAxisType").value="time",e.elements.namedItem("xAxisTitle").value=m.title,e.elements.namedItem("manualTime").checked=m.manual,e.elements.namedItem("timeFormat").value=m.format,e.elements.namedItem("maxReadings").value=m.max.toString()),"linear-auto"===o.type?(e.elements.namedItem("yAxisType").value="linear",e.elements.namedItem("yAxisTitle").value=o.title,e.elements.namedItem("autoScale").checked=!0):"linear-manual"===o.type?(e.elements.namedItem("yAxisType").value="linear",e.elements.namedItem("yAxisTitle").value=o.title,e.elements.namedItem("autoScale").checked=!1,e.elements.namedItem("yAxisMin").value=o.min.toString(),e.elements.namedItem("yAxisMax").value=o.max.toString()):(e.elements.namedItem("yAxisType").value=2===o.base?"log2":"log10",e.elements.namedItem("yAxisTitle").value=o.title),e.elements.namedItem("showPoints").checked=r.points,e.elements.namedItem("fillArea").checked=r.fill,e.elements.namedItem("graphCount").value=i.length.toString(),a();for(let t=0;t<i.length;t++){const a=i[t],n=t+1;e.elements.namedItem(`graph${n}Name`).value=a.label,e.elements.namedItem(`graph${n}Color`).value=a.color}}function n(e,t){function n(){"time"===e.xType.value?(e.timeS.style.display="block",e.linearS.style.display="none"):(e.timeS.style.display="none",e.linearS.style.display="block")}function l(){"log10"===e.yType.value||"log2"===e.yType.value?(e.auto.checked=!0,e.auto.disabled=!0,e.yRange.style.display="none"):(e.auto.disabled=!1,e.yRange.style.display=e.auto.checked?"none":"block")}function i(){e.graphsS.innerHTML="";const t=parseInt(e.graphs.value),a=["#007bff","#28a745","#dc3545","#ffc107","#17a2b8","#6f42c1","#fd7e14","#20c997","#6c757d","#343a40"];for(let n=1;n<=t;n++){const t=document.createElement("div");t.setAttribute("aria-label",`Graph ${n}`),t.className="border rounded p-3 mb-3 graph-config",t.setAttribute("data-graph",n.toString());const l=a[(n-1)%a.length];t.innerHTML=`\n        <h5 class="mb-3">Graph ${n} Configuration</h5>\n        <div class="row g-3">\n          <div aria-label="Name" class="col-md-6">\n            <label for="graph${n}Name" class="form-label">Graph Name</label>\n            <input type="text" class="form-control" id="graph${n}Name" name="graph${n}Name" value="Graph ${n}" required>\n          </div>\n          <div aria-label="Color" class="col-md-6">\n            <label for="graph${n}Color" class="form-label">Graph Color</label>\n            <input type="color" class="form-control form-control-color" id="graph${n}Color" name="graph${n}Color" value="${l}" required>\n          </div>\n        </div>\n      `,e.graphsS.appendChild(t)}}function s(){n(),l(),i()}function m(){a(t,o,s)}const o={serial:{break:"/",mcu_commands:{cls:"%",csv:"@",png:"&",json:"$"}},chart:{title:"Oscilloscope",x:{type:"linear",title:"Index",min:0,max:500},y:{type:"linear-auto",title:"Value"},options:{points:!1,fill:!1}},datasets:[{label:"Graph 1",color:"#007bff"}]};return{all:s,x:n,y:l,graphs:i,reset:m}}e.create_config=t,e.set_config=a,e.ui=n}(setup_form||(setup_form={})),function(e){function t(e){const t=new FormData(e);let a=null;t.get("bgTransparent")||(a=t.get("bgColor"));const n=parseInt(t.get("imageWidth")),l=parseInt(t.get("imageHeight")),i=parseInt(t.get("marginLeft")),s=parseInt(t.get("marginRight")),m=parseInt(t.get("marginTop")),o=parseInt(t.get("marginBottom")),r={width:{image:n,plot:n-i-s},height:{image:l,plot:l-m-o},margins:{left:i,right:s,top:m,bottom:o}},g=parseInt(t.get("gridXGap")),d=t.get("gridXGapMode");let p=null;if(t.get("gridYGap")){const e=parseInt(t.get("gridYGap"));p={gap_by:t.get("gridYGapMode"),val:e}}const c=parseFloat(t.get("axesWidth")),u=t.get("axesColor"),h=parseFloat(t.get("gridWidth")),f=t.get("gridColor"),y=parseInt(t.get("fontSize")),v={gaps:{x:{gap_by:d,val:g},y:p},lines:{axes:{color:u,width:c},main:{color:f,width:h},font:{color:t.get("fontColor"),size:y}}},I=parseFloat(t.get("seriesWidth")),x=parseFloat(t.get("seriesAlpha"));let b=null;if(t.get("showPoints")){b={radius:parseFloat(t.get("pointRadius")),alpha:parseFloat(t.get("pointAlpha"))}}let S=null;if(t.get("showFill")){S={alpha:parseFloat(t.get("fillAlpha"))}}return{bg:a,dimensions:r,grid:v,series:{width:I,alpha:x,point:b,fill:S}}}function a(e,t,a){const{bg:n,dimensions:l,grid:i,series:s}=t;null===n?e.elements.namedItem("bgTransparent").checked=!0:(e.elements.namedItem("bgTransparent").checked=!1,e.elements.namedItem("bgColor").value=n),e.elements.namedItem("imageWidth").value=l.width.image.toString(),e.elements.namedItem("imageHeight").value=l.height.image.toString(),e.elements.namedItem("marginLeft").value=l.margins.left.toString(),e.elements.namedItem("marginRight").value=l.margins.right.toString(),e.elements.namedItem("marginTop").value=l.margins.top.toString(),e.elements.namedItem("marginBottom").value=l.margins.bottom.toString(),e.elements.namedItem("gridXGap").value=i.gaps.x.val.toString(),e.elements.namedItem("gridXGapMode").value=i.gaps.x.gap_by,null!==i.gaps.y&&(e.elements.namedItem("gridYGap").value=i.gaps.y.val.toString(),e.elements.namedItem("gridYGapMode").value=i.gaps.y.gap_by),e.elements.namedItem("axesWidth").value=i.lines.axes.width.toString(),e.elements.namedItem("axesColor").value=i.lines.axes.color,e.elements.namedItem("gridWidth").value=i.lines.main.width.toString(),e.elements.namedItem("gridColor").value=i.lines.main.color,e.elements.namedItem("fontSize").value=i.lines.font.size.toString(),e.elements.namedItem("fontColor").value=i.lines.font.color,e.elements.namedItem("seriesWidth").value=s.width.toString(),e.elements.namedItem("seriesAlpha").value=s.alpha.toString(),null!==s.point?(e.elements.namedItem("showPoints").checked=!0,e.elements.namedItem("pointRadius").value=s.point.radius.toString(),e.elements.namedItem("pointAlpha").value=s.point.alpha.toString()):e.elements.namedItem("showPoints").checked=!1,null!==s.fill?(e.elements.namedItem("showFill").checked=!0,e.elements.namedItem("fillAlpha").value=s.fill.alpha.toString()):e.elements.namedItem("showFill").checked=!1,a()}function n(e,t,n){function l(){e.bgS.style.display=e.tbg.checked?"none":"block"}function i(){e.points.checked?e.pointsS.removeAttribute("style"):e.pointsS.style.display="none"}function s(){e.fillS.style.display=e.fill.checked?"block":"none"}function m(){n?e.yGapS.style.display="none":e.yGapS.removeAttribute("style")}function o(){l(),i(),s(),m()}function r(){a(t,{bg:"#ffffff",dimensions:{width:{image:1280,plot:1180},height:{image:720,plot:620},margins:{left:50,right:50,top:50,bottom:50}},grid:{gaps:{x:{gap_by:"px",val:100},y:{gap_by:"px",val:100}},lines:{axes:{color:"#000000",width:2},main:{color:"#cccccc",width:1},font:{color:"#000000",size:10}}},series:{width:1.5,alpha:1,point:null,fill:null}},o)}return{all:o,bg:l,points:i,fill:s,yGap:m,reset:r}}e.create_config=t,e.set_config=a,e.ui=n}(svg_form||(svg_form={}));