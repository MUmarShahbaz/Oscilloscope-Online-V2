"use strict";var Serial_Controller;!function(e){function r(){var e;"function"==typeof(null===(e=navigator.serial)||void 0===e?void 0:e.requestPort)?alerts.success("Web Serial API detected!",{dismissible:!0,autoClose:3e3}):alerts.error("Web Serial API not found. Use a supported browser!",{dismissible:!0})}async function i(e,r,i){n=e,l=r;try{c=await navigator.serial.requestPort(),await c.open({baudRate:n}),a=Date.now()}catch(e){alerts.error("Could not connect to port",{dismissible:!0})}i()}async function t(){if(!c||!c.readable)return void alerts.error("Could not read from port",{dismissible:!0});if(e.isReading)return void alerts.warning("Already reading from port",{dismissible:!0});e.isReading=!0,d=c.readable.getReader();const r=new TextDecoder;try{for(;e.isReading;){const{value:e,done:i}=await d.read();if(i)break;const t=r.decode(e,{stream:!0});u+=t;const s=u.split("\n");u=s.pop()||"";for(const e of s){const r=e.trim();if(r){const e=Date.now()-a;l(r,e)}}}}catch(r){e.isReading&&(alerts.error("Error reading from serial port",{dismissible:!0}),await s())}finally{try{d&&(d.releaseLock(),d=null)}catch(e){}e.isReading=!1}}async function s(){if(e.isReading=!1,d)try{d.releaseLock(),d=null}catch(e){}if(c){try{await c.close(),alerts.success("Serial port disconnected",{dismissible:!0,autoClose:2e3})}catch(e){alerts.error("Error closing serial port",{dismissible:!0})}c=null}u=""}function o(){return null!=c}let a,n,l,c=null,d=null,u="";e.isReading=!1,e.test=r,e.init=i,e.start=t,e.quit=s,e.isConnected=o}(Serial_Controller||(Serial_Controller={}));